services:
  airflow-init:
    build: .
    command: >
      bash -c "airflow db upgrade && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'True'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      PYTHONPATH: /opt/airflow
      GCP_CREDENTIALS_PATH: /opt/airflow/config/gcp-creds.json
      GCP_RAW_BUCKET: ${GCP_RAW_BUCKET}
    depends_on:
      - postgres

  airflow-webserver:
    build: .
    command: airflow webserver
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'True'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      PYTHONPATH: /opt/airflow
      GCP_CREDENTIALS_PATH: ${GCP_CREDENTIALS_PATH}
      GCP_RAW_BUCKET: ${GCP_RAW_BUCKET}
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully


  airflow-scheduler:
    build: .
    command: airflow scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'True'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      PYTHONPATH: /opt/airflow
      GCP_CREDENTIALS_PATH: ${GCP_CREDENTIALS_PATH}
      GCP_RAW_BUCKET: ${GCP_RAW_BUCKET}
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully


  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5